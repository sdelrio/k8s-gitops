---
resources:

- apiVersion: "vault.banzaicloud.com/v1alpha1"
  kind: "Vault"
  metadata:
    name: "vault"
  spec:
    size: 1
    image: vault:1.6.5

## https://github.com/orgs/banzaicloud/packages/container/bank-vaults/versions
#    bankVaultsImage: ghcr.io/banzaicloud/bank-vaults:latest

    # Set use which node label for pod anti-affinity. Prevent all vault put on same node.
    podAntiAffinity: kubernetes.io/hostname

    # Specify the ServiceAccount where the Vault Pod and the Bank-Vaults configurer/unsealer is running
    serviceAccount: vault


    # A YAML representation of a final vault config file.
    # See https://www.vaultproject.io/docs/configuration/ for more information.
    config:
      storage:
        raft:
          path: /vault/file
      listener:
        tcp:
          address: "0.0.0.0:8200"
          tls_cert_file: /vault/tls/server.crt
          tls_key_file: /vault/tls/server.key
      telemetry:
        statsd_address: localhost:9125
      api_addr: https://vault.vault:8200
      cluster_addr: "https://${.Env.POD_NAME}:8201"
      ui: true

    # See: https://banzaicloud.com/docs/bank-vaults/cli-tool/#example-external-vault-configuration
    # The repository also contains a lot examples in the deploy/ and operator/deploy directories.
    externalConfig:
      policies:
        - name: allow_secrets
          rules: path "secret/*" {
            capabilities = ["create", "read", "update", "delete", "list"]
            }
      auth:
        - type: kubernetes
          roles:
            # Allow every pod in the default namespace to use the secret kv store
            - name: default
              bound_service_account_names: ["default", "vault-secrets-webhook", "vault"]
              bound_service_account_namespaces: ["default", "vault", "produciton-survey", "production-madventure", "production-metareview"]
              policies: ["allow_secrets", "allow_pki"]
              ttl: 1h

      secrets:
        - path: secret
          type: kv
          description: General secrets.
          options:
            version: 2

      # Allows writing some secrets to Vault (useful for development purposes).
      # See https://www.vaultproject.io/docs/secrets/kv/index.html for more information.
      startupSecrets:
        - type: kv
          path: secret/data/accounts/aws
          data:
            data:
              AWS_ACCESS_KEY_ID: secretId
              AWS_SECRET_ACCESS_KEY: s3cr3t
        - type: kv
          path: secret/data/dockerrepo
          data:
            data:
              DOCKER_REPO_USER: dockerrepouser
              DOCKER_REPO_PASSWORD: dockerrepopassword
        - type: kv
          path: secret/data/mysql
          data:
            data:
              MYSQL_ROOT_PASSWORD: s3cr3t
              MYSQL_PASSWORD: 3xtr3ms3cr3t

    vaultEnvsConfig:
      - name: VAULT_LOG_LEVEL
        # note: disable debug log level on production
        value: debug

    serviceRegistrationEnabled: true

    resources:
      # A YAML representation of resource ResourceRequirements for vault container
      # Detail can reference: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container
      vault:
        limits:
          memory: "512Mi"
          cpu: "200m"
        requests:
          memory: "256Mi"
          cpu: "100m"

    volumeMounts:
      - name: vault-raft
        mountPath: /vault/file

    caNamespaces:
      - "vault"

    # Use local disk to store Vault file data, see config section.
    #volumes:
    #  - name: vault-file
    #    persistentVolumeClaim:
    #      claimName: vault-file

    # Use local disk to store Vault file data, see config section.
    volumeClaimTemplates:
      - metadata:
          name: vault-raft
        spec:
          storageClassName: "longhorn-r3"
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
    volumeMounts:
      - name: vault-raft
        mountPath: /vault/file

    # Add Velero fsfreeze sidecar container and supporting hook annotations to Vault Pods:
    # https://velero.io/docs/v1.2.0/hooks/
    veleroEnabled: true

    # Describe where you would like to store the Vault unseal keys and root token.
    unsealConfig:
      options:
        # The preFlightChecks flag enables unseal and root token storage tests
        # This is true by default
        preFlightChecks: true
      kubernetes:
        secretNamespace: vault

    serviceRegistrationEnabled: true

#- apiVersion: v1
#  kind: PersistentVolumeClaim
#  metadata:
#    name: vault-file
#  spec:
#    # https://kubernetes.io/docs/concepts/storage/persistent-volumes/#class-1
#    storageClassName: "longhorn-nfs"
#    volumeName: vault-file
#    accessModes:
#      - ReadWriteMany
#    resources:
#      requests:
#        storage: 250Mi
#
#- apiVersion: v1
#  kind: PersistentVolume
#  metadata:
#    name: vault-file
#  spec:
#    capacity:
#      storage: 1Gi
#    accessModes:
#    - ReadWriteMany
#    persistentVolumeReclaimPolicy: Recycle
#    hostPath:
#      path: /vault/file
