grafana:
  enabled: true
  ingress:
    enabled: true
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - grafana.dev.{{ .Values.dns_domain_1 }}
    tls:
      - hosts:
          - grafan.dev.{{ .Values.dns_domain_1 }}
  adminPassword: {{ .Values.grafana_admin_password }}
  persistence:
    enabled: true
  additionalDataSources:
    - name: Loki
      type: loki
      url: http://loki-stack:3100
      access: proxy
      isDefault: false
      version: 1
  plugins:
    - grafana-piechart-panel

prometheus:
  enabled: true
  prometheusSpec:
    replicas: 1
    retentionSize: 20Gi
    retention: 30d
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: openebs-hostpath
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 20Gi
  additionalScrapeConfigs:
    - job_name: 'blackboxssh'
      metrics_path: /probe
      params:
        module: [ssh_banner]
      static_configs:
        - targets:
          - 192.168.1.200
          - 192.168.1.201
          - 192.168.1.202
      relabel_configs:
        # Ensure port is 5222, pass as URL parameter
        - source_labels: [__address__]
          regex: (.*)(:.*)?
          replacement: ${1}:22
          target_label: __param_target
        # Make instance label the target
        - source_labels: [__param_target]
          target_label: instance
        # Actually talk to the blackbox exporter though
        - target_label: __address__
          replacement: blackbox-prometheus-blackbox-exporter:9115 # Blackbox exporter."
    - job_name: blackbox
      metrics_path: /probe
      params:
        module: [http_2xx]
      static_configs:
        - targets:
          - https://www.lorien.cloud/
          - https://www.lorien.cloud/grimoire/
          - https://www.lorien.cloud/rules/
          - https://www.lorien.cloud/brigada/
      relabel_configs:
        - source_labels: [__address__]
          target_label: __param_target
        - source_labels: [__param_target]
          target_label: instance
        - target_label: __address__  # Comment 1
          replacement: blackbox-prometheus-blackbox-exporter:9115 # Blackbox exporter."
    - job_name: blackboxtcp
      metrics_path: /probe
      params:
        module: [ts_banner]
      static_configs:
        - targets:
          - ts.torrasque.tk:10011
      relabel_configs:
        - source_labels: [__address__]
          target_label: __param_target
        - source_labels: [__param_target]
          target_label: instance
        - target_label: __address__
          replacement: blackbox-prometheus-blackbox-exporter:9115 # Blackbox exporter."

#    retentionSize: 5Gi
#    retention: 5d
#    resources:
#      requests:
#        cpu: 500m
#        memory: 400Mi
#      limits:
#        cpu: 1000m
#        memory: 800Mi
#    storageSpec:
#      volumeClaimTemplate:
#        spec:
#          storageClassName: openebs-hostpath
#          accessModes: ["ReadWriteOnce"]
#          resources:
#            requests:
#              storage: 5Gi
#    apiserverConfig: {}
#      host:  # Host of apiserver. A valid string consisting of a hostname or IP followed by an optional port number 	string 	true
#      basicAuth:  # BasicAuth allow an endpoint to authenticate over basic authentication 	*BasicAuth 	false
#      bearerToken: # Bearer token for accessing apiserver. 	string 	false
#      bearerTokenFile: # File to read bearer token for accessing apiserver. 	string 	false
#      tlsConfig:  # TLS Config to use for accessing apiserver. 	*TLSConfig 	false

prometheusOperator:
# https://github.com/helm/charts/issues/19147
  admissionWebhooks:
    enabled: false
    patch:
      enabled: false
    tlsProxy:
      enabled: false

  resources:
    limits:
      cpu: 200m
      memory: 200Mi
    requests:
      cpu: 100m
      memory: 100Mi

alertmanager:
  alertmanagerSpec:
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: openebs-hostpath
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 2Gi

coreDns:
  enabled: true
  service:
    selector:
      k8s-app: kube-dns

kubeEtcd:
  enabled: true
  service:
    selector:
      tier: control-plane
      component: etcd
  serviceMonitor:
    scheme: https
    insecureSkipVerify: true
    certFile: "/etc/prometheus/secrets/etcd-cert/etcd.pem"
    keyFile: "/etc/prometheus/secrets/etcd-cert/etcd-key.pem"

kubeScheduler:
  enalbed: true
  service:
    selector:
      tier: control-plane
      component: kube-scheduler

kubelet:
  enabled: true
  namepsace: kube-system

kubeControllerManager:
  enabled: true
  service:
    selector:
      component: kube-controller-manager
